import{r as n,j as s}from"./app-ChKRcjS5.js";import{c as _,R as J,T as K,P as Q,W as U,C as Z,a as C,b as H,D as ee,O as te}from"./index-PfYFsvSU.js";import{a as g}from"./utils-RMTchy85.js";import{b as j}from"./button-Cebg5LKQ.js";import{X as oe}from"./tooltip-DjS6GZwQ.js";function ae(e,t=[]){let o=[];function r(i,l){const c=n.createContext(l),d=o.length;o=[...o,l];const p=A=>{var h;const{scope:f,children:v,...D}=A,y=((h=f==null?void 0:f[e])==null?void 0:h[d])||c,X=n.useMemo(()=>D,Object.values(D));return s.jsx(y.Provider,{value:X,children:v})};p.displayName=i+"Provider";function x(A,f){var y;const v=((y=f==null?void 0:f[e])==null?void 0:y[d])||c,D=n.useContext(v);if(D)return D;if(l!==void 0)return l;throw new Error(`\`${A}\` must be used within \`${i}\``)}return[p,x]}const a=()=>{const i=o.map(l=>n.createContext(l));return function(c){const d=(c==null?void 0:c[e])||i;return n.useMemo(()=>({[`__scope${e}`]:{...c,[e]:d}}),[c,d])}};return a.scopeName=e,[r,re(a,...t)]}function re(...e){const t=e[0];if(e.length===1)return t;const o=()=>{const r=e.map(a=>({useScope:a(),scopeName:a.scopeName}));return function(i){const l=r.reduce((c,{useScope:d,scopeName:p})=>{const A=d(i)[`__scope${p}`];return{...c,...A}},{});return n.useMemo(()=>({[`__scope${t.scopeName}`]:l}),[l])}};return o.scopeName=t.scopeName,o}function b(e,t){if(typeof e=="function")return e(t);e!=null&&(e.current=t)}function se(...e){return t=>{let o=!1;const r=e.map(a=>{const i=b(a,t);return!o&&typeof i=="function"&&(o=!0),i});if(o)return()=>{for(let a=0;a<r.length;a++){const i=r[a];typeof i=="function"?i():b(e[a],null)}}}}function R(...e){return n.useCallback(se(...e),e)}function ne(e,t,{checkForDefaultPrevented:o=!0}={}){return function(a){if(e==null||e(a),o===!1||!a.defaultPrevented)return t==null?void 0:t(a)}}var ie=Symbol("radix.slottable");function le(e){const t=({children:o})=>s.jsx(s.Fragment,{children:o});return t.displayName=`${e}.Slottable`,t.__radixId=ie,t}var S="AlertDialog",[ce,$e]=ae(S,[_]),u=_(),w=e=>{const{__scopeAlertDialog:t,...o}=e,r=u(t);return s.jsx(J,{...r,...o,modal:!0})};w.displayName=S;var de="AlertDialogTrigger",P=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(K,{...a,...r,ref:t})});P.displayName=de;var pe="AlertDialogPortal",T=e=>{const{__scopeAlertDialog:t,...o}=e,r=u(t);return s.jsx(Q,{...r,...o})};T.displayName=pe;var ue="AlertDialogOverlay",E=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(te,{...a,...r,ref:t})});E.displayName=ue;var m="AlertDialogContent",[ge,fe]=ce(m),me=le("AlertDialogContent"),O=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,children:r,...a}=e,i=u(o),l=n.useRef(null),c=R(t,l),d=n.useRef(null);return s.jsx(U,{contentName:m,titleName:$,docsSlug:"alert-dialog",children:s.jsx(ge,{scope:o,cancelRef:d,children:s.jsxs(Z,{role:"alertdialog",...i,...a,ref:c,onOpenAutoFocus:ne(a.onOpenAutoFocus,p=>{var x;p.preventDefault(),(x=d.current)==null||x.focus({preventScroll:!0})}),onPointerDownOutside:p=>p.preventDefault(),onInteractOutside:p=>p.preventDefault(),children:[s.jsx(me,{children:r}),s.jsx(Ae,{contentRef:l})]})})})});O.displayName=m;var $="AlertDialogTitle",M=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(H,{...a,...r,ref:t})});M.displayName=$;var k="AlertDialogDescription",I=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(ee,{...a,...r,ref:t})});I.displayName=k;var xe="AlertDialogAction",F=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,a=u(o);return s.jsx(C,{...a,...r,ref:t})});F.displayName=xe;var L="AlertDialogCancel",z=n.forwardRef((e,t)=>{const{__scopeAlertDialog:o,...r}=e,{cancelRef:a}=fe(L,o),i=u(o),l=R(t,a);return s.jsx(C,{...i,...r,ref:l})});z.displayName=L;var Ae=({contentRef:e})=>{const t=`\`${m}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${m}\` by passing a \`${k}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${m}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return n.useEffect(()=>{var r;document.getElementById((r=e.current)==null?void 0:r.getAttribute("aria-describedby"))||console.warn(t)},[t,e]),null},De=w,ye=P,ve=T,B=E,G=O,W=F,N=z,V=M,Y=I;const Me=De,ke=ye,Ne=ve,q=n.forwardRef(({className:e,...t},o)=>s.jsx(B,{className:g("fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...t,ref:o}));q.displayName=B.displayName;const he=n.forwardRef(({className:e,children:t,...o},r)=>s.jsxs(Ne,{children:[s.jsx(q,{}),s.jsxs(G,{ref:r,className:g("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 bg-white dark:bg-gray-800 text-black dark:text-white border border-gray-200 dark:border-gray-700 p-6 shadow-2xl rounded-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",e),...o,children:[t,s.jsxs(N,{className:"absolute cursor-pointer right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none",children:[s.jsx(oe,{className:"h-4 w-4"}),s.jsx("span",{className:"sr-only ",children:"Close"})]})]})]}));he.displayName=G.displayName;const be=({className:e,...t})=>s.jsx("div",{className:g("flex flex-col space-y-2 text-center sm:text-left",e),...t});be.displayName="AlertDialogHeader";const _e=({className:e,...t})=>s.jsx("div",{className:g("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...t});_e.displayName="AlertDialogFooter";const Ce=n.forwardRef(({className:e,...t},o)=>s.jsx(V,{ref:o,className:g("text-lg font-bold text-black dark:text-white",e),...t}));Ce.displayName=V.displayName;const je=n.forwardRef(({className:e,...t},o)=>s.jsx(Y,{ref:o,className:g("text-sm text-gray-600 dark:text-gray-300",e),...t}));je.displayName=Y.displayName;const Re=n.forwardRef(({className:e,...t},o)=>s.jsx(W,{ref:o,className:g(j({variant:"destructive"}),"bg-red-600 hover:bg-red-700 text-white",e),...t}));Re.displayName=W.displayName;const Se=n.forwardRef(({className:e,...t},o)=>s.jsx(N,{ref:o,className:g(j({variant:"outline"}),"mt-2 sm:mt-0 text-gray-700 dark:text-gray-300",e),...t}));Se.displayName=N.displayName;export{Me as A,ke as a,he as b,be as c,Ce as d,je as e,_e as f,Se as g,Re as h};
